<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MongoDB BREADS(Browse, Read, Edit, Add, Delete, Sort)</title>
    <link rel="stylesheet" href="/stylesheets/bootstrap.min.css">
    <link href="/fontawesome/css/all.css" rel="stylesheet" />
    <link rel="stylesheet" href="/stylesheets/style.css">
</head>

<body>
    <div class="container">

        <div class="card text-left">

            <div class="card-header text-center">
                <h1>MongoDB BREADS(Browse, Read, Edit, Add, Delete, Sort)</h1>
            </div>

            <form class="mt-3 mx-3">

                <div class="row d-flex justify-content-between">

                    <div class="col-sm-1 col-form-label d-flex justify-content-between pt-0 pb-0">
                        <span class="input-group-text px-4">Show</span>
                        <select type="text" id="showData" class="col-sm-8 rounded-2" aria-label="Default select example"
                            onchange="chooseLimit()">
                            <option value="5">5</option>
                            <option value="10">10</option>
                            <option value="0">All</option>
                        </select>
                        <span class="input-group-text px-4">entries</span>
                    </div>

                    <div class="input-group w-75">
                        <input type="text" class="form-control" id="query" onkeyup="searching()" placeholder="Search"
                            aria-label="Recipientâ€™s username" aria-describedby="button-addon2">
                        <button class="btn btn-outline-secondary rounded-2" type="button" onclick="searching()"
                            id="button-addon2"><i class="fa-solid fa-magnifying-glass"></i></button>
                        <button class="btn btn-outline-warning rounded-2"><i class="fa-solid fa-rotate"
                                onclick="reset()"></i></button>
                    </div>

                </div>

            </form>

            <div class="card-body">

                <table id="table-data" class="table table-striped">
                    <thead id="table-header">
                    </thead>
                    <tbody id="table-content">
                    </tbody>
                </table>
            </div>

            <div class="card-footer text-body-secondary float-start">
                <button class="btn btn-primary py-1" onclick="editId = null;modalAdd.show()"><i
                        class="fa-solid fa-plus"></i></button>

                <!-- pagination -->
                <nav aria-label="Page navigation example" class="float-end">
                    <ul class="pagination" id="pagination">

                    </ul>
                </nav>
            </div>

        </div>

    </div>

    <!-- modal-add -->
    <div class="modal" tabindex="-1" id="modal-add">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">User Form</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <form id="add-user">
                        <div class="row mb-3">
                            <label for="name" class="col-sm-2 col-form-label">Name</label>
                            <div class="col-sm-10">
                                <input type="text" name="name" id="name" class="form-control" value="" required>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="phone" class="col-sm-2 col-form-label">Phone</label>
                            <div class="col-sm-10">
                                <input type="text" name="phone" id="phone" class="form-control" value="" required>
                            </div>
                        </div>
                    </form>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="editId = null">Close</button>
                    <button type="button" class="btn btn-primary" onclick="saveData()">Save changes</button>
                </div>
            </div>
        </div>
    </div>


    <!-- modal-delete -->
    <div class="modal" tabindex="-1" id="modal-delete">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Confirmation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                    <button type="button" class="btn btn-primary" onclick="deleteData()">Yes</button>
                </div>
            </div>
        </div>
    </div>

</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- javascript -->
<script>

    var modalAdd = new bootstrap.Modal(document.getElementById('modal-add'));
    var modalDelete = new bootstrap.Modal(document.getElementById('modal-delete'));
    var deleteId = null;
    var editId = null;
    let query = '';
    let params = {
        sortBy: '_id',
        sortMode: 'desc'
    }

    const showDelete = (id) => {
        deleteId = id;
        modalDelete.show()
    }

    const searching = () => {
        let input = document.getElementById('query').value;
        params = { ...params, page: 1, query: input };
        loadData();
    };

    const chooseLimit = () => {
        let select = document.getElementById('showData').value;
        params = { ...params, limit: select };
        loadData();
    }

    const reset = () => {
        let input = document.getElementById('query').value = '';
        params = { ...params, query: input };
        loadData();
    }

    // loadData
    const loadData = async () => {
        try{
            const searchParams = new URLSearchParams(params);
        const response = await fetch(`http://localhost:3000/users?${searchParams}`, {
            method: "GET"
        });

        const users = await response.json();
        let html = '';

        users.data.forEach((user, index) => {
            html += `
            <tr>
                <td>${index + users.offset + 1}</td>
                <td>${user.name}</td>
                <td>${user.phone}</td>
                <td>
                    <button type="button" onClick="showEdit('${user._id}')" class="btn btn-success py-1"><i class="fa-solid fa-pencil"></i></button>
                    <button type="button" onClick="showDelete('${user._id}')" class="btn btn-danger py-1"><i class="fa-solid fa-trash"></i></button>
                    <a href="/users/${user._id}/todos" class="btn btn-warning py-1"><i class="fa-solid fa-right-from-bracket"></i></a>
                </td>
            </tr>
            `
        });

        document.getElementById('table-content').innerHTML = html;
        params = { ...params, page: users.page, pages: users.pages };
        buildHeaderTable()
        buildPagination(users)
        } catch(e) {
            console.log(e, "data gagal diload")
        }
    };

    // editData
    const showEdit = async (id) => {
        try{
            editId = id;
        const response = await fetch(`http://localhost:3000/users/${editId}`, {
            method: "GET"
        });
        const user = await response.json();
        document.getElementById('name').value = user.name;
        document.getElementById('phone').value = user.phone;
        modalAdd.show();
        } catch(e) {
            console.log(e, "data gagal diedit")
        }
    }

    // saveData
    const saveData = async () => {
        try{
            const name = document.getElementById('name').value;
        const phone = document.getElementById('phone').value;

        let url = "http://localhost:3000/users";
        if (editId) url = `http://localhost:3000/users/${editId}`;

        const response = await fetch(url, {
            method: editId ? "PUT" : "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ name, phone })
        });

        document.getElementById('name').value = "";
        document.getElementById('phone').value = "";
        loadData();
        modalAdd.hide();
        } catch(e) {
            console.log(e, "data gagal ditambah")
        }
    }

    document.getElementById('add-user').addEventListener('submit', function (e) {
        e.preventDefault();
        saveData()
    });

    // deleteData
    const deleteData = async () => {
        try{
            const response = await fetch(`http://localhost:3000/users/${deleteId}`, {
            method: "DELETE",
            headers: {
                "Content-Type": "application/json"
            }
        });

        loadData();
        modalDelete.hide();
        } catch(e) {
            console.log(e, "data gagal dihapus")
        }
    }

    const buildPagination = (users) => {
        let html = '';

        if (document.getElementById('showData').value == 0) {
            html += `
            <span class="mx-3 mt-2">Showing ${users.offset + 1} to ${users.limit} of ${users.count} entries</span>
        `
        } else {
            html += `
            <span class="mx-3 mt-2">Showing ${users.offset + 1} to ${(users.limit + users.offset) >= users.count ? Number(users.count) : Number(users.limit) + Number(users.offset)} of ${users.count} entries</span>
        `
        };

        if (params.page > 1) {
            html += `
        <li class="page-item">
                <a class="page-link" href="javascript:void(0)" onclick="prevPage()" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        `
        }

        for (let i = 1; i <= params.pages; i++) {
            html += `
            <li class="page-item ${params.page == i ? ' active' : ''}">
                <a class="page-link" href="javascript:void(0)" onclick="changePage(${i})">${i}</a></li>
            `
        }

        if (params.page < params.pages) {
            html += `
        <li class="page-item">
                <a class="page-link" href="javascript:void(0)" onclick="nextPage()" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        `
        }

        document.getElementById('pagination').innerHTML = html;
    }

    const prevPage = () => {
        params = { ...params, page: params.page - 1 };
        loadData();
    }

    const nextPage = () => {
        params = { ...params, page: params.page + 1 };
        loadData();
    }

    const changePage = (newPage) => {
        params = { ...params, page: newPage };
        loadData();
    }

    const buildHeaderTable = () => {
        let html = `
        
             <tr>
                <th>No.</th>
                <th><a href="javascript:void(0)" onclick="sorting('name', '${params.sortMode == 'asc' ? 'desc' : 'asc'}')">
                    <i class="fa-solid fa-${params.sortBy == 'name' ? params.sortMode =='desc' ? 'sort-down' : 'sort-up' : 'sort'}"></i>Name</a></th>
                <th><a href="javascript:void(0)" onclick="sorting('phone', '${params.sortMode == 'asc' ? 'desc' : 'asc'}')">
                    <i class="fa-solid fa-${params.sortBy == 'phone' ? params.sortMode =='desc' ? 'sort-down' : 'sort-up' : 'sort'}"></i>Phone</a></th>
                <th>Actions</th>
            </tr>
        `
        document.getElementById('table-header').innerHTML = html;
    }

    const sorting = (sortBy, sortMode) => {
        params = { ...params, sortBy, sortMode};
        loadData();
    }

    loadData()
</script>

</html>